/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 02 15:30:13 GMT 2025
 */

package org.apache.commons.lang3.text.translate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import org.apache.commons.lang3.text.translate.UnicodeUnescaper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UnicodeUnescaper_ESTest extends UnicodeUnescaper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UnicodeUnescaper unicodeUnescaper0 = new UnicodeUnescaper();
      assertNotNull(unicodeUnescaper0);
      
      char[] charArray0 = new char[6];
      charArray0[1] = 'u';
      charArray0[0] = '\\';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(6, charBuffer0.limit());
      assertEquals("\\u\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(6, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertArrayEquals(new char[] {'\\', 'u', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        unicodeUnescaper0.translate((CharSequence) charBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to parse unicode value: \u0000\u0000\u0000\u0000
         //
         verifyException("org.apache.commons.lang3.text.translate.UnicodeUnescaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UnicodeUnescaper unicodeUnescaper0 = new UnicodeUnescaper();
      assertNotNull(unicodeUnescaper0);
      
      char[] charArray0 = new char[23];
      charArray0[6] = 'z';
      charArray0[4] = '\\';
      charArray0[5] = 'u';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(23, charArray0.length);
      assertNotNull(charBuffer0);
      assertEquals(23, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(23, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\\uz\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(23, charBuffer0.length());
      assertEquals(23, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      
      // Undeclared exception!
      try { 
        unicodeUnescaper0.translate((CharSequence) charBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to parse unicode value: z\u0000\u0000\u0000
         //
         verifyException("org.apache.commons.lang3.text.translate.UnicodeUnescaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnicodeUnescaper unicodeUnescaper0 = new UnicodeUnescaper();
      assertNotNull(unicodeUnescaper0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      char[] charArray0 = new char[6];
      charArray0[1] = '\\';
      charArray0[2] = 'v';
      stringWriter0.write(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("\u0000\\v\u0000\u0000\u0000", stringWriter0.toString());
      assertArrayEquals(new char[] {'\u0000', '\\', 'v', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("\u0000\\v\u0000\u0000\u0000", stringWriter0.toString());
      assertEquals("\u0000\\v\u0000\u0000\u0000", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
      
      unicodeUnescaper0.translate((CharSequence) stringBuffer0, (Writer) stringWriter0);
      assertEquals("\u0000\\v\u0000\u0000\u0000\u0000\\v\u0000\u0000\u0000", stringWriter0.toString());
      assertEquals(12, stringBuffer0.length());
      assertEquals("\u0000\\v\u0000\u0000\u0000\u0000\\v\u0000\u0000\u0000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnicodeUnescaper unicodeUnescaper0 = new UnicodeUnescaper();
      assertNotNull(unicodeUnescaper0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      // Undeclared exception!
      try { 
        unicodeUnescaper0.translate((CharSequence) "x", (-1887), (Writer) stringWriter0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnicodeUnescaper unicodeUnescaper0 = new UnicodeUnescaper();
      assertNotNull(unicodeUnescaper0);
      
      StringWriter stringWriter0 = new StringWriter(765);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      // Undeclared exception!
      try { 
        unicodeUnescaper0.translate((CharSequence) null, 765, (Writer) stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.translate.UnicodeUnescaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UnicodeUnescaper unicodeUnescaper0 = new UnicodeUnescaper();
      assertNotNull(unicodeUnescaper0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(charBuffer0);
      assertEquals(6, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(6, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(6, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        unicodeUnescaper0.translate((CharSequence) charBuffer0, 7, (Writer) stringWriter0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnicodeUnescaper unicodeUnescaper0 = new UnicodeUnescaper();
      assertNotNull(unicodeUnescaper0);
      
      char[] charArray0 = new char[23];
      charArray0[6] = '+';
      charArray0[4] = '\\';
      charArray0[5] = 'u';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(23, charArray0.length);
      assertNotNull(charBuffer0);
      assertEquals("\u0000\u0000\u0000\u0000\\u+\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(23, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(23, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(23, charBuffer0.capacity());
      assertEquals(23, charBuffer0.length());
      
      StringWriter stringWriter0 = new StringWriter(4);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      // Undeclared exception!
      try { 
        unicodeUnescaper0.translate((CharSequence) charBuffer0, 4, (Writer) stringWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to parse unicode value: \u0000\u0000\u0000\u0000
         //
         verifyException("org.apache.commons.lang3.text.translate.UnicodeUnescaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnicodeUnescaper unicodeUnescaper0 = new UnicodeUnescaper();
      char[] charArray0 = new char[6];
      charArray0[4] = '\\';
      charArray0[5] = 'u';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        unicodeUnescaper0.translate((CharSequence) charBuffer0, 4, (Writer) stringWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Less than 4 hex digits in unicode value: '\\u' due to end of CharSequence
         //
         verifyException("org.apache.commons.lang3.text.translate.UnicodeUnescaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnicodeUnescaper unicodeUnescaper0 = new UnicodeUnescaper();
      StringWriter stringWriter0 = new StringWriter();
      int int0 = unicodeUnescaper0.translate((CharSequence) "0", 0, (Writer) stringWriter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnicodeUnescaper unicodeUnescaper0 = new UnicodeUnescaper();
      char[] charArray0 = new char[6];
      charArray0[5] = '\\';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      int int0 = unicodeUnescaper0.translate((CharSequence) charBuffer0, 5, (Writer) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnicodeUnescaper unicodeUnescaper0 = new UnicodeUnescaper();
      char[] charArray0 = new char[5];
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      charArray0[0] = '\\';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        unicodeUnescaper0.translate((CharSequence) charBuffer0, 0, (Writer) stringWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Less than 4 hex digits in unicode value: '\\uu\u0000\u0000' due to end of CharSequence
         //
         verifyException("org.apache.commons.lang3.text.translate.UnicodeUnescaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnicodeUnescaper unicodeUnescaper0 = new UnicodeUnescaper();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[1] = '\\';
      stringWriter0.write(charArray0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      unicodeUnescaper0.translate((CharSequence) stringBuffer0, (Writer) stringWriter0);
      int int0 = unicodeUnescaper0.translate((CharSequence) stringBuffer0, 7, (Writer) stringWriter0);
      assertEquals(0, int0);
  }
}
